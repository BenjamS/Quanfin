slopeOsc<-function(in_ts, smooth_it = T, per_ema = 3, per_slope = 3,
                   graph_on = F,
                   programatic_slope = F,
                   programatic_slopeVolatility = F,
                   get_binry = 0)
{
  xts_cp <- in_ts
  if(smooth_it){
    xts_cp_smoothed <- EMA(xts_cp, per_ema)
    xts_mat <- merge(xts_cp, xts_cp_smoothed)
    df_in_ts <- fortify(xts_mat)
    colnames(df_in_ts) <- c("Date", "ts", "ts_ema")
    df_in_ts$ts_dt <- df_in_ts$ts - df_in_ts$ts_ema
    df_in_ts$ts_dt_ema <- EMA(df_in_ts$ts_dt, per_ema)
    in_ts <- df_in_ts$ts_ema
  }else{
    df_in_ts <- fortify(xts_cp)
    colnames(df_in_ts) <- c("Date", "ts")
  }
  slope_window <- per_slope
  n_ts <- length(in_ts)
  s_start <- slope_window + 1
  s_end <- n_ts
  x <- c(1:(slope_window + 1))
  dydx_mu <- c()
  dydx_sd <- c()
  t <- 0
  #--------------------------------
  for(s in s_start:s_end)
  {
    datseg <- in_ts[(s - slope_window):s]
    q <- polyfit(x, datseg, n = 2)
    a2 <- q[1]; a1 <- q[2]; a0 <- q[3]
    this_slope <- 2 * a2 * x + a1
    t <- t + 1
    dydx_mu[t] <- mean(this_slope, na.rm = T)
    dydx_sd[t] <- sd(this_slope, na.rm = T)
  }
  dydx_cv <- dydx_sd / dydx_mu
  if(is.null(per_ema) == F){
    dydx_mu[1:(per_ema - 1)] <- NA
    dydx_cv[1:(per_ema - 1)] <- NA
  }
  mu_dydx_cv <- mean(abs(dydx_cv), na.rm = T)
  ldydx_cv <- log(abs(dydx_cv)) #EMA(log(abs(dydx_cv)), slope_window)
  dydx_sd <- EMA(dydx_sd, slope_window)
  mu_ldydx_cv <- mean(ldydx_cv, na.rm = T)
  mu_dydx_mu <- mean(dydx_mu, na.rm = T)
  sd_dydx_mu <- sd(dydx_mu, na.rm = T)
  cv_dydx_mu <- sd_dydx_mu / mu_dydx_mu
  slope <- c(rep(NA, per_slope), dydt_mu)
  slope_volatility = c(rep(NA, per_slope), ldydt_cv)
  df_slope <- data.frame(Date = df_in_ts$Date, slope, slope_volatility)
  df_ts_and_slope <- merge(df_in_ts, df_slope)
  #--------------------------------
  if(programatic_slope){out <- slope}
  if(programatic_slopeVolatility){out <- slope_volatility}
  if(!programatic_slope & !programatic_slopeVolatility){
    outlist <- df_slope
    }
  #--------------------------------
  if(graph_on){

    colnames(df_ts_and_slope)[2:ncol(df_slope)] <- c("time series slope", "time series slope logged volatility")
    gathercols <- colnames(df_slope)[2:ncol(df_slope)]
    df_plot <- gather_(df_slope, "Type", "Value", gathercols)
    #----
    df_plot_mean_line <- data.frame(Type = unique(df_plot$Type), mu_line = c(mu_dydt_mu, mu_ldydt_cv))
    df_plot_sd_lines1 <- data.frame(Type = unique(df_plot$Type), sd_line = c(mu_dydt_mu + 2 * sd_dydt_mu,
                                                                             mu_ldydt_cv + 2 * sd_ldydt_cv))
    df_plot_sd_lines2 <- data.frame(Type = unique(df_plot$Type), sd_line = c(mu_dydt_mu - 2 * sd_dydt_mu,
                                                                             mu_ldydt_cv - 2 * sd_ldydt_cv))
    #----
    gg <- ggplot()
    gg <- gg + geom_rect(data = df_upTrends, aes(xmin = UpStartDate, xmax = UpStopDate,
                                                 ymin = -Inf, ymax = Inf, fill = `Pct. Change/Time`), alpha = 0.7)
    gg <- gg + scale_fill_gradient2(low = "darkmagenta", mid = "khaki2", high = "green")
    gg <- gg + geom_line(data = df_plot, aes(x = Date, y = Value))
    gg <- gg + facet_wrap(~Type, ncol = 1, scales = "free")
    gg <- gg + geom_hline(data = df_plot_mean_line, aes(yintercept = mu_line), color = "blue")
    gg <- gg + geom_hline(data = df_plot_sd_lines1, aes(yintercept = sd_line), color = "orange")
    gg <- gg + geom_hline(data = df_plot_sd_lines2, aes(yintercept = sd_line), color = "orange")
    gg <- gg + geom_vline(data = df_plot_up_false, aes(xintercept = UpStartDate), color = "darkmagenta", alpha = 0.5)
    gg <- gg + geom_vline(data = df_plot_up_false, aes(xintercept = UpStopDate), color = "darkmagenta", alpha = 0.5)
    gg <- gg + theme_bw()
    gg <- gg + theme(axis.title.x = element_blank(),
                     axis.text.x = element_blank(),
                     axis.ticks.x = element_blank(),
                     axis.title.y = element_blank(),
                     panel.grid.major = element_blank(),
                     panel.grid.minor = element_blank(),
                     legend.position = "none")
    #gg
    
  }
  #--------------------------------
  return(outlist)
}
