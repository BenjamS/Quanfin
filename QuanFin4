library(tidyquant)
library(ggthemes)
library(WaveletComp)
library(Hmisc)
library(corrplot)
source('~/getTsTrendInds.R')


fitWave <- function(ts, per_vec, n_max_periods = 5, pval_thresh = 0.01, n_lookAhead = 30){
  n_t <- length(ts)
  t <- 1:n_t
  regrsrs_sin <- paste0("sin(2 * pi / per_vec[", c(1:n_max_periods), "] * t)", collapse = " + ")
  regrsrs_cos <- paste0("cos(2 * pi / per_vec[", c(1:n_max_periods), "] * t)", collapse = " + ")
  regrsrs <- paste(regrsrs_sin, regrsrs_cos, sep = " + ")
  this_formula <- as.formula(paste("ts ~ -1 +", regrsrs)[1])
  linmod <- lm(this_formula)
  summod <- summary(linmod)
  #summod
  pvals <- as.numeric(summod$coefficients[, 4])
  ind_rm <- which(pvals > pval_thresh)
  round <- 0
  while(length(ind_rm) > 0){
    round <- round + 1
    print(paste("round ", round))
    if(round == 7){
      print("Too many rounds, aborting.")
      break
    }
    regrsrs_char <- strsplit(as.character(regrsrs), " \\+ ")[[1]]
    regrsrs_char <- regrsrs_char[-ind_rm]
    regrsrs <- paste(regrsrs_char, collapse = " + ")
    this_formula <- as.formula(paste("ts ~ -1 +", regrsrs)[1])
    linmod <- lm(this_formula)
    #---------------------
    summod <- summary(linmod)
    #print(summod)
    pvals <- as.numeric(summod$coefficients[, 4])
    ind_rm <- which(pvals > pval_thresh)
  }
  fitted_wave <- fitted(linmod)
  
  t <- (n_t + 1):(n_t + n_lookAhead)
  regrsrs_fut <- names(linmod$coefficients)
  #regrsrs_fut <- gsub("t", "t_fut", regrsrs_fut)
  list_fut <- list()
  for(i in 1:length(regrsrs_fut)){
    list_fut[[i]] <- eval(parse(text = regrsrs_fut[i]))
  }
  df_fut <- as.data.frame(do.call(cbind, list_fut))
  predict_wave <- predict(linmod, df_fut, interval = "prediction")
  list_out <- list(fitted_wave, predict_wave)
  print(summod)
  return(list_out)
}
#========================================================================

tq_exchange_options()
tq_index_options()

fromdate<-"2017-06-20"; todate <- Sys.Date() #todate <- "2019-01-01"

this_guy <- c("SPY")
tbl_ohlcv <- tq_get(this_guy, get = "stock.prices", from = fromdate)
df_ohlcv <- as.data.frame(tbl_ohlcv)
df_ohlcv$p <- rowSums(df_ohlcv[, c(3:5)]) / 3
#--
df <- df_ohlcv[, c("date", "p")]
df <- as.data.frame(df)
o <- apply(df, 2, function(x) length(which(is.na(x))))
table(o)
#df[, -1] <- na.spline(df[, -1])
per_ema <- 21
#df_ema <- as.data.frame(apply(df[, -1], 2, EMA, per_ema))
#df$p <- log(df$p)
df$ema <- EMA(df$p, per_ema)
df$dt <- df$p - df$ema

gathercols <- colnames(df)[2:ncol(df)]
df_plot <- df %>% gather_("Type", "Value", gathercols)
df_plot$Subtype <- NA
df_plot$Subtype[which(df_plot$Type == "ema")] <- "EMA"
df_plot$Subtype[which(df_plot$Type == "p")] <- "spot"
df_plot$Type[-which(df_plot$Type == "dt")] <- "time series"
df_plot$Type[which(df_plot$Type == "dt")] <- "detrended"

gg <- ggplot()
gg <- gg + geom_line(data = df_plot, aes(x = date, y = Value, color = Subtype))
gg <- gg + facet_wrap(~Type, ncol = 1, scales = "free_y")
gg <- gg + theme(legend.position = "none")
gg

#---------------------
in_df <- df
in_df$ema <- NULL
outlist <- getTsTrendInds(in_df,
                      thresh_pct_uptrend = 0.7,
                      thresh_pct_dntrend = -0.7)
df_upTrnds <- outlist[[1]]
df_dnTrnds <- outlist[[2]]

mu_p <- mean(df$p, na.rm = T)
mu_p_dt <- 0#mean(df_x$p_dt, na.rm = T)
df_plot_mean_line <- data.frame(Type = c("time series", "detrended"),
                                mu_line = c(mu_p, mu_p_dt))
gg <- ggplot()
gg <- gg + geom_rect(data = df_upTrnds, aes(xmin = UpStartDate, xmax = UpStopDate,
                                             ymin = -Inf, ymax = Inf, fill = `Pct. Change/Time`), alpha = 0.7)
gg <- gg + scale_fill_gradient2(low = "darkmagenta", mid = "khaki2", high = "green", midpoint = 0)
# gg <- gg + geom_rect(data = df_upTrnds, aes(xmin = UpStartDate, xmax = UpStopDate,
#                                              ymin = -Inf, ymax = Inf, fill = factor(`True uptrend`)), alpha = 0.7)
# gg <- gg + scale_fill_manual(values = c("magenta", "green"))
gg <- gg + geom_line(data = df_plot, aes(x = date, y = Value, color = Subtype))
gg <- gg + facet_wrap(~Type, ncol = 1, scales = "free_y")
gg <- gg + geom_hline(data = df_plot_mean_line, aes(yintercept = mu_line), color = "orange")
gg <- gg + theme(legend.position = "none")
gg

#========================================================================
# Detect periodicity
df_wave <- df[ -c(1:(per_ema + 1)),]
#df_wave$dt <- scale(df_wave$dt)
my.w <- analyze.wavelet(df_wave, "dt",
                        loess.span = 0,
                        dt = 1, dj = 1/250,
                        lowerPeriod = 2^3,
                        upperPeriod = 2^9,
                        make.pval = TRUE, n.sim = 10)
wt.image(my.w, color.key = "quantile", n.levels = 250,
         legend.params = list(lab = "wavelet power levels", mar = 4.7))
# my.rec <- reconstruct(my.w)
# x.rec <- my.rec$series$x.r  # x: name of original series
df_periodogram <- data.frame(period = my.w$Period, power = my.w$Power.avg)
ind_critPoints <- findPeaks(df_periodogram$power)
critPers <- df_periodogram$period[ind_critPoints]
critPers
gg <- ggplot(df_periodogram, aes(x = period, y = power))
gg <- gg + geom_line()
gg <- gg + geom_vline(xintercept = critPers, color = "cyan", size = 1.5)
gg
#-------------------
critPwrs <- df_periodogram$power[ind_critPoints]
ind_order <- order(critPwrs, decreasing = T)
per_vec <- critPers[ind_order]
#-------------------
# Validate
n_lookAhead = 150
ind_fit <- 1:(nrow(df_wave) - n_lookAhead)
ind_test <- setdiff(1:nrow(df_wave), ind_fit)
ts <- df_wave$dt[ind_fit]
out_fitWave <- fitWave(ts, per_vec, n_max_periods = 5, pval_thresh = 0.01, n_lookAhead)
yhat <- out_fitWave[[1]]
ypredict <- out_fitWave[[2]]
#-------------------

df_wave$yhat <- c(yhat, ypredict[, 1])
df_wave$set <- NA
df_wave$set[ind_fit] <- "fit"
df_wave$set[ind_test] <- "test"

df_plot <- df_wave
#df_plot$dt <- NULL
df_plot <- df_plot %>% gather(Type, Value, p:yhat)

df_plot$Subtype <- NA
df_plot$Subtype[which(df_plot$Type == "ema")] <- "EMA"
df_plot$Subtype[which(df_plot$Type == "p")] <- "spot"
df_plot$Subtype[which(df_plot$Type == "yhat")] <- "yhat"
df_plot$Type[which(df_plot$Type %in% c("p", "ema"))] <- "time series"
df_plot$Type[which(df_plot$Type %in% c("dt", "yhat"))] <- "detrended"
#df_plot <- df_plot[800:nrow(df_plot), ]

# df_rect <- data.frame(start_date = c(df_plot$date[1], df_plot$date[ind_test[1]]),
#                       stop_date = c(df_plot$date[ind_fit[length(ind_fit)]], df_plot$date[ind_test[length(ind_test)]]),
#                       set = c("fit", "train"))
# gg <- gg + geom_rect(data = df_rect, aes(xmin = start_date, xmax = stop_date,
#                                          ymin = -Inf, ymax = Inf, fill = factor(set)), alpha = 0.7)

df_plot_zero_line <- data.frame(Type = c("time series", "detrended"),
                                mu_line = c(NA, 0))

gg <- ggplot()
# gg <- gg + geom_rect(data = df_upTrnds, aes(xmin = UpStartDate, xmax = UpStopDate,
#                                             ymin = -Inf, ymax = Inf, fill = factor(`True uptrend`)), alpha = 0.7)
# gg <- gg + scale_fill_manual(values = c("magenta", "green"))
gg <- gg + geom_rect(data = df_upTrnds, aes(xmin = UpStartDate, xmax = UpStopDate,
                                             ymin = -Inf, ymax = Inf, fill = `Pct. Change/Time`), alpha = 0.7)
gg <- gg + scale_fill_gradient2(low = "darkmagenta", mid = "khaki2", high = "green")
gg <- gg + geom_line(data = df_plot, aes(x = date, y = Value, color = Subtype), lwd = 1)
gg <- gg + geom_vline(xintercept = df_plot$date[ind_test[1]], lwd = 1.1)
gg <- gg + geom_hline(data = df_plot_zero_line, aes(yintercept = mu_line))
gg <- gg + facet_wrap(~Type, ncol = 1, scales = "free_y")
gg <- gg + theme(legend.position = "none")
gg
#-----------------------
#-------------------
# Predict
n_lookAhead = 50
ind_fit <- 1:nrow(df_wave)
ind_pred <- (nrow(df_wave) + 1):(nrow(df_wave) + n_lookAhead)
ts <- df_wave$dt[ind_fit]
out_fitWave <- fitWave(ts, per_vec, n_max_periods = 5, pval_thresh = 0.01, n_lookAhead)
yhat <- out_fitWave[[1]]
ypredict <- out_fitWave[[2]]
#-------------------
df_wave$yhat <- yhat
df_wave$set <- "fit"
date_fut <- seq(as.Date(df_wave$date[nrow(df_wave)] + 1), as.Date(df_wave$date[nrow(df_wave)] + 2 * n_lookAhead), by = 1)
date_fut <- date_fut[!weekdays(date_fut) %in% c('Saturday','Sunday')]
#length(date_fut)
date_fut <- date_fut[1:n_lookAhead]
df_add <- data.frame(date = date_fut, p = NA, ema = NA, dt = NA, yhat = ypredict[, 1], set = "predict")
df_wave <- rbind(df_wave, df_add)

df_plot <- df_wave
#df_plot$dt <- NULL
df_plot <- df_plot %>% gather(Type, Value, p:yhat)

df_plot$Subtype <- NA
df_plot$Subtype[which(df_plot$Type == "ema")] <- "EMA"
df_plot$Subtype[which(df_plot$Type == "p")] <- "spot"
df_plot$Subtype[which(df_plot$Type == "yhat")] <- "yhat"
df_plot$Type[which(df_plot$Type %in% c("p", "ema"))] <- "time series"
df_plot$Type[which(df_plot$Type %in% c("dt", "yhat"))] <- "detrended"
#df_plot <- df_plot[800:nrow(df_plot), ]

# df_rect <- data.frame(start_date = c(df_plot$date[1], df_plot$date[ind_test[1]]),
#                       stop_date = c(df_plot$date[ind_fit[length(ind_fit)]], df_plot$date[ind_test[length(ind_test)]]),
#                       set = c("fit", "train"))
# gg <- gg + geom_rect(data = df_rect, aes(xmin = start_date, xmax = stop_date,
#                                          ymin = -Inf, ymax = Inf, fill = factor(set)), alpha = 0.7)

df_plot_zero_line <- data.frame(Type = c("time series", "detrended"),
                                mu_line = c(NA, 0))

gg <- ggplot()
# gg <- gg + geom_rect(data = df_upTrnds, aes(xmin = UpStartDate, xmax = UpStopDate,
#                                             ymin = -Inf, ymax = Inf, fill = factor(`True uptrend`)), alpha = 0.7)
# gg <- gg + scale_fill_manual(values = c("magenta", "green"))
gg <- gg + geom_rect(data = df_upTrnds, aes(xmin = UpStartDate, xmax = UpStopDate,
                                            ymin = -Inf, ymax = Inf, fill = `Pct. Change/Time`), alpha = 0.7)
gg <- gg + scale_fill_gradient2(low = "darkmagenta", mid = "khaki2", high = "green")
gg <- gg + geom_line(data = df_plot, aes(x = date, y = Value, color = Subtype), lwd = 1)
gg <- gg + geom_hline(data = df_plot_zero_line, aes(yintercept = mu_line))
gg <- gg + facet_wrap(~Type, ncol = 1, scales = "free_y")
gg <- gg + theme(legend.position = "none")
gg







# gg <- ggplot()
# # gg <- gg + geom_rect(data = df_upTrends, aes(xmin = UpStartDate, xmax = UpStopDate,
# #                                              ymin = -Inf, ymax = Inf, fill = `Pct. Change`), alpha = 0.7)
# # gg <- gg + scale_fill_gradient2(low = "darkmagenta", mid = "khaki2", high = "green")
# gg <- gg + geom_rect(data = df_upTrnds, aes(xmin = UpStartDate, xmax = UpStopDate,
#                                             ymin = -Inf, ymax = Inf, fill = factor(`True uptrend`)), alpha = 0.7)
# gg <- gg + scale_fill_manual(values = c("magenta", "green"))
# gg <- gg + geom_line(data = df_plot, aes(x = date, y = Value, color = Subtype))
# #gg <- gg + geom_ribbon(data = df_plot, aes(x = date, ymin = lwr, ymax = upr))
# gg <- gg + facet_wrap(~Type, ncol = 1, scales = "free_y")
# gg <- gg + theme(legend.position = "none")
# gg





# date_fut <- as.Date((Sys.Date() + 1):(Sys.Date() + n_lookAhead * 2))
# date_fut <- date_fut[!weekdays(date_fut) %in% c("Saturday", "Sunday")]
# date_fut <- date_fut[1:n_lookAhead]
# #length(date_fut)
# NA_vec <- rep(NA, n_lookAhead)
# # df_add <- data.frame(date = date_fut, p = NA_vec, ema = NA_vec, dt = NA_vec, yhat = df_pred$fit, lwr = df_pred$lwr, upr = df_pred$upr)
# # df_wave$lwr <- NA
# # df_wave$upr <- NA
# df_add <- data.frame(date = date_fut, p = NA_vec, ema = NA_vec, dt = NA_vec, yhat = df_pred$fit)
# df_plot <- rbind(df_wave, df_add)































#========================================================================







# these_exchangeRates <- c("EUR/USD", "USD/JPY", "AUD/USD", "GBP/USD", "USD/CHF", "USD/CAD")
# df_ohlcv <- tq_get(these_exchangeRates, 
#                   get = "exchange.rates", 
#                   from = Sys.Date() - days(180))
fromdate<-"2017-01-01"; todate <- Sys.Date() #todate <- "2019-01-01"
currency_symbs <- c("EURUSD=X", "JPY=X", "CHF=X", "CAD=X",
                    "GBPUSD=X", "AUDUSD=X", "INR=X")
tbl_ohlcv <- tq_get(currency_symbs, 
                   get = "stock.prices", 
                   from = fromdate)
df_ohlcv <- as.data.frame(tbl_ohlcv)
df_ohlcv$p <- rowSums(df_ohlcv[, c(4:6)]) / 3
#--
df <- df_ohlcv[, c("symbol", "date", "p")]
o <- apply(df, 2, function(x) length(which(is.na(x))))
table(o)
df <- as.data.frame(df %>% group_by(symbol) %>% mutate(p = na.approx(p)))
o <- apply(df, 2, function(x) length(which(is.na(x))))
table(o)

per_ema <- 13
df <- as.data.frame(df %>% group_by(symbol) %>% mutate(dt = p - EMA(p, per_ema)))

list_df <- list()
list_per <- list()
for(i in 1:length(currency_symbs)){
  this_exchangeRate <- currency_symbs[i]
  print(this_exchangeRate)
  this_df <- subset(df, symbol == this_exchangeRate)
  my.w <- analyze.wavelet(this_df[ -c(1:(per_ema - 1)),], "dt",
                          loess.span = 0,
                          dt = 1, dj = 1/250,
                          lowerPeriod = 2^3,
                          upperPeriod = 2^9,
                          make.pval = TRUE, n.sim = 10)
  
  df_periodogram <- data.frame(period = my.w$Period, power = my.w$Power.avg)
  ind_critPoints <- findPeaks(df_periodogram$power)
  critPoints <- df_periodogram$period[ind_critPoints]
  print(critPoints)
  df_periodogram$symbol <- this_exchangeRate
  list_df[[i]] <- df_periodogram
  list_per[[i]] <- critPoints
  # gg <- ggplot(df_periodogram, aes(x = period, y = power))
  # gg <- gg + geom_line()
  # gg
  
  
}
df_periodograms <- do.call(rbind, list_df)

gg <- ggplot(df_periodograms, aes(x = period, y = power, group = symbol, color = symbol))
gg <- gg + geom_line()
gg
#------------------------------------------------------------------------
df_pca <- df[, c("date", "symbol", "dt")] %>% spread(symbol, dt)
date_vec <- df_pca$date[-c(1:(per_ema - 1))]
mat_in <- as.matrix(df_pca[-c(1:(per_ema - 1)), -1])
#--Correlation matrix
rcorr_out <- rcorr(mat_in)
cormat <- rcorr_out$r
pmat <- rcorr_out$P
corrplot(cormat, type="upper", order="hclust", p.mat = pmat, sig.level = 0.01, insig = "blank", tl.col = "black", tl.srt = 45)
#--PCA
library(FactoMineR)
library(factoextra)
mat_in <- scale(mat_in)
col_order <- colnames(mat_in)
n_ts <- ncol(mat_in)
row.names(mat_in) <- date_vec
res <- PCA(mat_in)
#--Extraction of signals (main PCs)
lam_cor <- as.data.frame(res$eig)$eigenvalue
lamcor_max <- max(lam_cor)
N_t <- nrow(mat_in)
N_c <- ncol(mat_in)
Q <- N_t / N_c
s_sq <- 1 - lamcor_max / N_c
#s_sq <- 1
lamrand_max <- s_sq * (1 + 1 / Q + 2 / sqrt(Q))
lamrand_min <- s_sq * (1 + 1 / Q - 2 / sqrt(Q))
lam <- seq(lamrand_min, lamrand_max, 0.001)
dens_rand <- Q / (2 * pi * s_sq) * sqrt((lamrand_max - lam) * (lam - lamrand_min)) / lam
df_e <- data.frame(eigenvalues = lam_cor)
gg <- ggplot()
gg <- gg + geom_density(data = df_e, aes(x = eigenvalues, color = "Correlation Matrix"), lwd = 1.1)
gg <- gg + geom_line(data = data.frame(x = lam, y = dens_rand), aes(x = x, y = y, color = "Random matrix"), lwd = 1.1)
gg <- gg + scale_colour_manual(name = "Eigenvalue density", 
                               values = c(`Correlation Matrix` = "blue", `Random matrix` = "orange"))
gg
mat_eigvecs <- res$var$coord
ind_deviating_from_noise <- which(lam_cor > (lamrand_max + 5 * 10^-1))
lam_signals <- lam_cor[ind_deviating_from_noise]
n_signals <- length(lam_signals)
print(paste("Number of signals: ", n_signals))
# Set sign of eigenvectors such that they
# best conform to the input time series
mat_PC_signals <- mat_eigvecs[, ind_deviating_from_noise]
mat_signals_ts <- mat_in %*% mat_PC_signals
if(n_signals == 1){
  mat_signals_ts <- mat_signals_ts * 1 / lam_signals
}else{
  mat_signals_ts <- mat_signals_ts %*% diag(1 / lam_signals)
  
}
ts_avg <- rowMeans(mat_in)
#ts_avg[1]

if(n_signals == 1){
  sse <- sum((mat_signals_ts - ts_avg)^2)
  sse_neg <- sum((-mat_signals_ts - ts_avg)^2)
  sse_vec <- c(sse, sse_neg)
  if(which(sse_vec == min(sse_vec)) == 2){
    mat_PC_signals <- -mat_PC_signals
  }
  lm_out <- lm(y ~ x, data = data.frame(y = mat_signals_ts, x = ts_avg))
  sum_lm <- summary(lm_out)
  param <- sum_lm$coefficients[2]
  mat_signals_ts <- 1 / param * mat_signals_ts
  mat_PC_signals <- 1 / param * mat_PC_signals
  
}else{
  for(i in 1:n_signals){
    sse <- sum((mat_signals_ts[, i] - ts_avg)^2)
    sse_neg <- sum((-mat_signals_ts[, i] - ts_avg)^2)
    sse_vec <- c(sse, sse_neg)
    if(which(sse_vec == min(sse_vec)) == 2){
      mat_PC_signals[, i] <- -mat_PC_signals[, i]
    }
    lm_out <- lm(y ~ x, data = data.frame(y = mat_signals_ts[, i], x = ts_avg))
    sum_lm <- summary(lm_out)
    param <- sum_lm$coefficients[2]
    mat_signals_ts[, i] <- 1 / param * mat_signals_ts[, i]
    mat_PC_signals[, i] <- 1 / param * mat_PC_signals[, i]
    
  }
  
}

#------------------------------------------------------------
df_plot <- data.frame(Indicator = col_order, mat_PC_signals)
signal_id <- paste("Signal", c(1:n_signals))
colnames(df_plot)[2:(n_signals + 1)] <- signal_id
gathercols <- as.character(signal_id)
df_plot <- gather_(df_plot, "Signal", "Loading", gathercols)
gg <- ggplot(df_plot, aes(x = Indicator, y = Loading))
gg <- gg + geom_bar(stat = "identity", position = "dodge")
gg <- gg + facet_wrap(~ Signal, nrow = 1)
#gg <- gg + labs(title = )
gg <- gg + theme(axis.text.y = element_text(face = "bold", size = 13),
                 axis.text.x = element_text(face = "bold", size = 11),
                 axis.title.y = element_text(face = "bold", size = 11),
                 axis.title.x = element_text(face = "bold", size = 11))
gg <- gg + coord_equal()
# if(N_c <= 50){
#   gg <- gg + theme(axis.text.x = element_text(angle = 60, hjust = 1),
#                    axis.title.y = element_blank())
# }else{
#   gg <- gg + theme(axis.text.x = element_blank(),
#                    axis.title.y = element_blank())
# }
gg <- gg + coord_flip()
gg
#------------------------------------------------------------------------
this_symbol <- "EURUSD=X"
this_df_periodogram <- subset(df_periodograms, symbol == this_symbol)
gg <- ggplot(this_df_periodogram, aes(x = period, y = power))
gg <- gg + geom_line()
gg

ind_critPoints <- findPeaks(this_df_periodogram$power)
critPers <- this_df_periodogram$period[ind_critPoints]


critPwrs <- this_df_periodogram$power[ind_critPoints]
ind_order <- order(critPwrs, decreasing = T)
per_vec <- critPers[ind_order]
per_vec
n_lookAhead = 200
this_df <- subset(df, symbol == this_symbol)
df_wave <- this_df[-c(1:(per_ema - 1)), ]
n_obs <- nrow(df_wave)
ind_fit <- 1:(n_obs - n_lookAhead)
ind_test <- setdiff(1:n_obs, ind_fit)
ts <- df_wave$dt[ind_fit]
out_fitWave <- fitWave(ts, per_vec, n_max_periods = 3, pval_thresh = 0.01, n_lookAhead)
yhat <- out_fitWave[[1]]
ypredict <- out_fitWave[[2]]


df_wave$yhat <- c(yhat, ypredict[, 1])
df_wave$set <- NA
df_wave$set[ind_fit] <- "fit"
df_wave$set[ind_test] <- "test"

df_plot <- df_wave
#df_plot$dt <- NULL
df_plot <- df_plot %>% gather(Type, Value, p:yhat)

df_plot$Subtype <- NA
df_plot$Subtype[which(df_plot$Type == "ema")] <- "EMA"
df_plot$Subtype[which(df_plot$Type == "p")] <- "spot"
df_plot$Subtype[which(df_plot$Type == "yhat")] <- "yhat"
df_plot$Type[which(df_plot$Type %in% c("p", "ema"))] <- "time series"
df_plot$Type[which(df_plot$Type %in% c("dt", "yhat"))] <- "detrended"
#df_plot <- df_plot[800:nrow(df_plot), ]

# df_rect <- data.frame(start_date = c(df_plot$date[1], df_plot$date[ind_test[1]]),
#                       stop_date = c(df_plot$date[ind_fit[length(ind_fit)]], df_plot$date[ind_test[length(ind_test)]]),
#                       set = c("fit", "train"))
# gg <- gg + geom_rect(data = df_rect, aes(xmin = start_date, xmax = stop_date,
#                                          ymin = -Inf, ymax = Inf, fill = factor(set)), alpha = 0.7)

df_plot_zero_line <- data.frame(Type = c("time series", "detrended"),
                                mu_line = c(NA, 0))

gg <- ggplot()
# gg <- gg + geom_rect(data = df_upTrnds, aes(xmin = UpStartDate, xmax = UpStopDate,
#                                             ymin = -Inf, ymax = Inf, fill = factor(`True uptrend`)), alpha = 0.7)
# gg <- gg + scale_fill_manual(values = c("magenta", "green"))
gg <- gg + geom_rect(data = df_upTrnds, aes(xmin = UpStartDate, xmax = UpStopDate,
                                            ymin = -Inf, ymax = Inf, fill = `Pct. Change`), alpha = 0.7)
gg <- gg + scale_fill_gradient2(low = "darkmagenta", mid = "khaki2", high = "green")
gg <- gg + geom_line(data = df_plot, aes(x = date, y = Value, color = Subtype), lwd = 1)
gg <- gg + geom_vline(xintercept = df_plot$date[ind_test[1]], lwd = 1.1)
gg <- gg + geom_hline(data = df_plot_zero_line, aes(yintercept = mu_line))
gg <- gg + facet_wrap(~Type, ncol = 1, scales = "free_y")
gg <- gg + theme(legend.position = "none")
gg






























df_plot <- subset(df, symbol == "EURUSD=X")
df_plot <- df_plot[-c(1:(per_ema - 1)),]

n_max_periods <- 2
pval_thresh <- 0.01
per_vec <- list_per[[1]]
n_t <- nrow(df_plot)
t <- 1:n_t
ts <- df_plot$dt

yhat <- fitWave(ts, t, per_vec, n_max_periods = 3)
  
df_plot$yhat <- fitted(linmod)
df_plot <- df_plot %>% gather(Type, Value, exchange.rate:yhat)
df_plot$Subtype <- NA
df_plot$Subtype[which(df_plot$Type == "ema")] <- "EMA"
df_plot$Subtype[which(df_plot$Type == "exchange.rate")] <- "spot"
df_plot$Subtype[which(df_plot$Type == "yhat")] <- "yhat"
df_plot$Type[which(df_plot$Type %in% c("exchange.rate", "ema"))] <- "time series"
df_plot$Type[which(df_plot$Type %in% c("dt", "yhat"))] <- "detrended"

gg <- ggplot(df_plot, aes(x = date, y = Value, group = Subtype, color = Subtype))
gg <- gg + geom_line()
gg <- gg + facet_wrap(~Type, ncol = 1, scales = "free_y")
gg <- gg + theme(legend.position = "none")
gg


gathercols <- colnames(df)[2:ncol(df)]
df_plot <- df %>% gather_("Type", "Value", gathercols)
df_plot$Subtype <- NA
df_plot$Subtype[which(df_plot$Type == "ema")] <- "EMA"
df_plot$Subtype[which(df_plot$Type == "p")] <- "spot"
df_plot$Type[-which(df_plot$Type == "dt")] <- "time series"
df_plot$Type[which(df_plot$Type == "dt")] <- "detrended"

gg <- ggplot()
gg <- gg + geom_line(data = df_plot, aes(x = date, y = Value, color = Subtype))
gg <- gg + facet_wrap(~Type, ncol = 1, scales = "free_y")
gg <- gg + theme(legend.position = "none")
gg


# source('~/fitWave.R', echo=TRUE)
# df_plot <- subset(df[, c("symbol", "date", "dt")], symbol == "EUR/USD")
# df_plot <- df_plot[-c(1:(per_ema + 1)),]
# n_t <- nrow(df_plot)
# ts = df_plot$dt
# t = 1:n_t
# fitWave(ts, t, t_proj = NULL, q_prob = 0.99,
#         pval_thresh = 0.01, nper_fit = NULL, quietly = T)
# 





df_mod <- df[, c("date", "symbol", "dt")]
df_mod <- df_mod %>% spread(symbol, dt)

regrsrs <- paste0("`", colnames(df_mod)[-c(1, 3)], "`", collapse = " + ")
this_formula <- as.formula(paste("`EUR/USD` ~ -1 + ", regrsrs)[1])
linmod <- lm(this_formula, df_mod)
summary(linmod)

rcorr_out <- rcorr(as.matrix(df_mod[, -1]))
cormat_econ <- rcorr_out$r
pmat_econ <- rcorr_out$P
#corrplot(cormat_econ, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
corrplot(cormat_econ, type="upper", order="hclust", p.mat = pmat_econ, sig.level = 0.01, insig = "blank", tl.col = "black", tl.srt = 45)


#========================================================================
#========================================================================
#========================================================================
#========================================================================

Signals_from_noise <- function(mat_in, list_tsTypes = NULL,
                               tsType_names = NULL,
                               pca_var_plot = F,
                               pca_ind_plot = F,
                               eigenvalue_density_plot = F){
  col_order <- colnames(mat_in)
  #date_vec <- as.Date(row.names(mat_in))
  n_ts <- ncol(mat_in)
  #----
  if(!is.null(list_tsTypes)){
    group_vec <- rep(NA, n_ts)
    for(i in 1:length(list_tsTypes)){
      this_tsType_vec <- list_tsTypes[[i]]
      this_tsType_name <- tsType_names[i]
      group_vec[which(col_order %in% this_tsType_vec)] <- this_tsType_name
      
    }
  }
  #----
  if(pca_ind_plot){
    res <- FactoMineR::PCA(t(mat_in), graph = F)
    gg <- factoextra::fviz_pca_ind(res, habillage = factor(group_vec), addEllipses = T)
    print(gg)
  }
  #----
  res <- FactoMineR::PCA(mat_in, graph = F)
  #----
  if(pca_var_plot){
    gg <- factoextra::fviz_pca_var(res, habillage = factor(group_vec))
    print(gg)
  }
  # library(mclust)
  # mc <- Mclust(t(mat_in))
  # summary(mc)
  # View(mc$classification)
  # factoextra::fviz_cluster(mc, frame.type = "norm", geom = "text")
  #--Extraction of signals (main PCs)
  lam_cor <- as.data.frame(res$eig)$eigenvalue
  lamcor_max <- max(lam_cor)
  N_t <- nrow(mat_in)
  N_c <- ncol(mat_in)
  Q <- N_t / N_c
  s_sq <- 1 - lamcor_max / N_c
  #s_sq <- 1
  lamrand_max <- s_sq * (1 + 1 / Q + 2 / sqrt(Q))
  lamrand_min <- s_sq * (1 + 1 / Q - 2 / sqrt(Q))
  lam <- seq(lamrand_min, lamrand_max, 0.001)
  dens_rand <- Q / (2 * pi * s_sq) * sqrt((lamrand_max - lam) * (lam - lamrand_min)) / lam
  df_e <- data.frame(eigenvalues = lam_cor)
  #--Eigenvalue density vs. random matrix eigenvalue density
  if(eigenvalue_density_plot){
    gg <- ggplot()
    gg <- gg + geom_density(data = df_e, aes(x = eigenvalues, color = "Correlation Matrix"), lwd = 1.1)
    gg <- gg + geom_line(data = data.frame(x = lam, y = dens_rand), aes(x = x, y = y, color = "Random matrix"), lwd = 1.1)
    gg <- gg + scale_colour_manual(name = "Eigenvalue density", 
                                   values = c(`Correlation Matrix` = "blue", `Random matrix` = "orange"))
    gg
  }
  #-----------------------------------------
  mat_eigvecs <- res$var$coord
  ind_deviating_from_noise <- which(lam_cor > (lamrand_max + 5 * 10^-1))
  if(ncol(mat_eigvecs) < length(ind_deviating_from_noise)){
    ind_deviating_from_noise <- 1:ncol(mat_eigvecs)
  }
  lam_signals <- lam_cor[ind_deviating_from_noise]
  n_signals <- length(lam_signals)
  print(paste("Number of signals: ", n_signals))
  # Set sign of eigenvectors such that they
  # best conform to the input time series
  mat_PC_signals <- mat_eigvecs[, ind_deviating_from_noise]
  mat_signals_ts <- mat_in %*% mat_PC_signals
  if(n_signals == 1){
    mat_signals_ts <- mat_signals_ts * 1 / lam_signals
  }else{
    mat_signals_ts <- mat_signals_ts %*% diag(1 / lam_signals)
    
  }
  ts_avg <- rowMeans(mat_in)
  #ts_avg[1]
  
  if(n_signals == 1){
    sse <- sum((mat_signals_ts - ts_avg)^2)
    sse_neg <- sum((-mat_signals_ts - ts_avg)^2)
    sse_vec <- c(sse, sse_neg)
    if(which(sse_vec == min(sse_vec)) == 2){
      mat_PC_signals <- -mat_PC_signals
    }
    lm_out <- lm(y ~ x, data = data.frame(y = mat_signals_ts, x = ts_avg))
    sum_lm <- summary(lm_out)
    param <- sum_lm$coefficients[2]
    mat_signals_ts <- 1 / param * mat_signals_ts
    mat_PC_signals <- 1 / param * mat_PC_signals
    
  }else{
    for(i in 1:n_signals){
      sse <- sum((mat_signals_ts[, i] - ts_avg)^2)
      sse_neg <- sum((-mat_signals_ts[, i] - ts_avg)^2)
      sse_vec <- c(sse, sse_neg)
      if(which(sse_vec == min(sse_vec)) == 2){
        mat_PC_signals[, i] <- -mat_PC_signals[, i]
      }
      lm_out <- lm(y ~ x, data = data.frame(y = mat_signals_ts[, i], x = ts_avg))
      sum_lm <- summary(lm_out)
      param <- sum_lm$coefficients[2]
      mat_signals_ts[, i] <- 1 / param * mat_signals_ts[, i]
      mat_PC_signals[, i] <- 1 / param * mat_PC_signals[, i]
      
    }
    
  }
  
  #------------------------------------------------------------
  # Plot loadings barcharts
  df_plot <- data.frame(ts = col_order, mat_PC_signals)
  signal_id <- paste("Signal", c(1:n_signals))
  colnames(df_plot)[2:(n_signals + 1)] <- signal_id
  gathercols <- as.character(signal_id)
  df_plot <- gather_(df_plot, "Signal", "Loading", gathercols)
  #--
  if(!is.null(list_tsTypes)){
    # df_plot$Type <- NA
    # u <- as.character(df_plot$ts)
    # for(i in 1:length(list_tsTypes)){
    #   ind <- which(u %in% list_tsTypes[[i]])
    #   df_plot$Type[ind] <- tsType_names[i]
    # }
    # df_plot$Type <- as.factor(df_plot$Type)
    df_plot$Type <- factor(group_vec)
    xx <- df_plot$Type
    df_plot$ts <- factor(df_plot$ts, levels = unique(df_plot$ts[order(xx)]))
    gg <- ggplot(df_plot, aes(x = ts, y = Loading, fill = Type))
  }else{
    gg <- ggplot(df_plot, aes(x = ts, y = Loading))
  }
  #--
  gg <- gg + geom_bar(stat = "identity", position = "dodge")
  gg <- gg + facet_wrap(~ Signal, nrow = 1)
  #gg <- gg + labs(title = )
  gg <- gg + theme(axis.text.y = element_text(face = "bold", size = 10),
                   axis.text.x = element_text(face = "bold", size = 10),
                   axis.title.y = element_text(face = "bold", size = 10),
                   axis.title.x = element_text(face = "bold", size = 10))
  gg <- gg + coord_equal()
  # if(N_c <= 50){
  #   gg <- gg + theme(axis.text.x = element_text(angle = 60, hjust = 1),
  #                    axis.title.y = element_blank())
  # }else{
  #   gg <- gg + theme(axis.text.x = element_blank(),
  #                    axis.title.y = element_blank())
  # }
  gg <- gg + coord_flip()
  print(gg)
  #---------------------------------
  # Plot signal ts
  df_plot1 <- data.frame(date = date_vec, ts_avg)
  df_plot2 <- data.frame(date = date_vec, mat_signals_ts)
  signal_id <- paste("Signal", c(1:n_signals))
  colnames(df_plot2)[2:(n_signals + 1)] <- signal_id
  gathercols <- signal_id
  df_plot2 <- df_plot2 %>% gather_("Signal", "Value", gathercols)
  gg <- ggplot()
  gg <- gg + geom_line(data = df_plot1, aes(x = date, y = ts_avg), color = "orange", lwd = 1.2)
  gg <- gg + geom_line(data = df_plot2, aes(x = date, y = Value))
  gg <- gg + facet_wrap(~ Signal, ncol = 1)
  gg <- gg + theme(axis.title.y = element_blank())
  gg
  #---------------------------------
  df_sigs <- data.frame(date = date_vec, mat_signals_ts)
  return(df_sigs)
}



#------------------------------------------------------------

spy_sector_symbs <- c("SPY", "XLF", "XLC", "XLY", "XLP", "XLV", "XLK", "RWR",
                           "XLU", "XLI", "XBI", "IYT", "TTEK", "VXX")
spy_sector_detail <- c("S&P 500 ETF", "Financials ETF", "Communications ETF", "Luxury goods ETF", "Staple goods ETF",
                       "Healthcare ETF", "Technology ETF", "Real estate ETF", "Utilities ETF", "Industrial ETF",
                       "Biotechnology ETF", "Transportation ETF", "Gov. (Tetratech)", "VIX ETF")
minerals_symbs <- c("GLD", "GDX", "XME", "SLV", "JJC")
minerals_detail <- c("Gold ETF", "Gold miners ETF", "US metals and mining ETF", "Silver ETF", "Copper ETF")
agriculture_symbs <- c("DBA", "JJG", "BAL", "SOYB", "SGG", "JO", "NIB")
agriculture_detail <- c("General agriculture ETF", "Grains ETF", "Cotton ETF", "Soybean ETF", "Sugar ETF", "Coffee ETF", "Cacao ETF")
energy_symbs <- c("WTI", "FUE", "WOOD", "ICLN", "KOL", "UNG")
energy_detail <- c("Oil (W&T Offshore Inc.)", "Biofuels ETF", "Timber ETF", "Clean energy ETF", "Coal ETF", "US natural gas ETF")
#currency_symbs <- c("EMLC", "UUP", "FXE", "FXY", "FXF", "FXC", "FXB", "FXA")
#currency_detail <- c("Emerging mkt currencies", "USD", "EUR", "JPY", "CHF", "CND", "GBP", "AUD")
currency_symbs <- c("EMLC", "EURUSD=X", "JPY=X", "CHF=X", "CAD=X",
                    "GBPUSD=X", "AUDUSD=X", "INR=X")
currency_detail <- c("Emerging mkt currencies ETF", "EUR/USD", "USD/JPY",
                     "USD/CHF", "USD/CAD", "GBP/USD", "AUD/USD", "USD/INR")
emerg_mkt_symbs <- c("ELD", "VWOB")
emerg_mkt_detail <- c("Emerg mkts debt ETF", "Emerg mkts gov bond ETF")
crypto_symbs <- c("BLOK", "LEGR", "KOIN", "BCNA")
crypto_detail <- crypto_symbs
Tbond_symbs <- c("IEI", "IEF", "TLT", "BIL")
Tbond_detail <- c("T-bond 3-7 yrs ETF", "T-bond 7-10 yrs ETF", "T-bond 20+ yrs ETF", "T-bond 1-3 months ETF")

ts_symb_vec <- c(spy_sector_symbs, minerals_symbs, agriculture_symbs, energy_symbs,
                 currency_symbs, emerg_mkt_symbs, crypto_symbs, Tbond_symbs)
ts_detail_vec <- c(spy_sector_detail, minerals_detail, agriculture_detail, energy_detail,
                   currency_detail, emerg_mkt_detail, crypto_detail, Tbond_detail)
df_symb_detail <- data.frame(symbol = ts_symb_vec, detail = ts_detail_vec)
#--
length(ts_symb_vec)
#--
# list_tsTypes <- list(spy_sector_symbs, minerals_symbs, agriculture_symbs, energy_symbs,
#                      currency_symbs, emerg_mkt_symbs, crypto_symbs, Tbond_symbs)
list_tsTypes <- list(spy_sector_detail, minerals_detail, agriculture_detail, energy_detail,
                     currency_detail, emerg_mkt_detail, crypto_detail, Tbond_detail)
tsType_names <- c("US Sectors", "Minerals", "Agriculture", "Energy", "Major Currency Pairs",
                  "Emerging Markets", "Cryptocurrencies/Blockchain", "T-Bonds")
#--
per_ema <- 13
fromdate = "2018-06-20"
tbl_ohlcv <- tq_get(ts_symb_vec, get = "stock.prices", from = fromdate)
df_ohlcv <- as.data.frame(tbl_ohlcv)
df_ohlcv$p <- rowSums(df_ohlcv[, c(4:6)]) / 3
#--
df <- df_ohlcv[, c("date", "symbol", "p")]
#--
# Crypto ts can have duplicate date entries sometimes (BTC-USD)
# Get rid of these duplicates, if any
df <- as.data.frame(df %>% group_by(symbol) %>% mutate(dup = duplicated(date)))
df <- subset(df, dup == F)
df$dup <- NULL
#--
df <- df %>% spread(symbol, p)
df <- df[-1, ]
mat_in <- na.approx(df[, -1])

o <- apply(mat_in, 2, function(x) length(which(is.na(x))))
table(o)
#which(o==1)
ind_rm_na <- nrow(mat_in)
mat_in <- mat_in[-ind_rm_na, ]
ind_rm_ema <- 1:(per_ema - 1)

mat_in <- apply(mat_in, 2, function(x) x - EMA(x, per_ema))
mat_in <- mat_in[-ind_rm_ema, ]
date_vec <- df$date[-c(ind_rm_ema, ind_rm_na)]
row.names(mat_in) <- as.character(date_vec)
colnames(mat_in) <- as.character(df_symb_detail$detail[order(df_symb_detail$symbol)])


df_sigs <- Signals_from_noise(mat_in, list_tsTypes = list_tsTypes,
                   tsType_names = tsType_names,
                   pca_var_plot = T,
                   pca_ind_plot = T,
                   eigenvalue_density_plot = T)
  
#========================================================================
#========================================================================
#========================================================================

df_sigs <- cbind(df_sigs, mat_in[, "S&P 500 ETF"])
colnames(df_sigs)[ncol(df_sigs)] <- "SPY"
df_sigs$date <- NULL
this_formula <- as.formula(paste("SPY ~", paste(colnames(df_sigs)[-ncol(df_sigs)], collapse = " + ")))
lm_out <- lm(this_formula, df_sigs)
summary(lm_out)


in_df <- mat_in[, c("date", "SPY")]
in_df$ema <- NULL
outlist <- getTsTrendInds(in_df,
                          thresh_pct_uptrend = 0.7,
                          thresh_pct_dntrend = -0.7)
df_upTrnds <- outlist[[1]]
df_dnTrnds <- outlist[[2]]

mu_p <- mean(df$p, na.rm = T)
mu_p_dt <- 0#mean(df_x$p_dt, na.rm = T)
df_plot_mean_line <- data.frame(Type = c("time series", "detrended"),
                                mu_line = c(mu_p, mu_p_dt))
gg <- ggplot()
gg <- gg + geom_rect(data = df_upTrnds, aes(xmin = UpStartDate, xmax = UpStopDate,
                                             ymin = -Inf, ymax = Inf, fill = `Pct. Change/Time`), alpha = 0.7)
gg <- gg + scale_fill_gradient2(low = "darkmagenta", mid = "khaki2", high = "green")
# gg <- gg + geom_rect(data = df_upTrnds, aes(xmin = UpStartDate, xmax = UpStopDate,
#                                             ymin = -Inf, ymax = Inf, fill = factor(`True uptrend`)), alpha = 0.7)
# gg <- gg + scale_fill_manual(values = c("magenta", "green"))
gg <- gg + geom_line(data = df_plot, aes(x = date, y = Value, color = Subtype))
gg <- gg + facet_wrap(~Type, ncol = 1, scales = "free_y")
gg <- gg + geom_hline(data = df_plot_mean_line, aes(yintercept = mu_line), color = "orange")
gg <- gg + theme(legend.position = "none")
gg




















































#========================================================================
#========================================================================
#========================================================================

getVolBins <- function(bins, ts_price, ts_volume, graph_on = F){
  vol_interval <- c()
  mu_price_interval <- c()
  for(i in 2:n_bins){
    price_interval <- c(bins[i - 1], bins[i])
    ind <- which(ts_price >= price_interval[1] & ts_price < price_interval[2])
    vol_this_interval <- sum(ts_volume[ind])
    vol_interval[i] <- vol_this_interval
    mu_price_interval[i] <- mean(price_interval)
  }
  df_VPOC <- data.frame(mu_Price_of_Bin = mu_price_interval, Vol_in_Bin = vol_interval)
  if(graph_on){
    ordered_volBins <- vol_interval[order(vol_interval)]
    plot(log(ordered_volBins))
    df_plot <- df_VPOC
    df_plot$lP <- log(df_plot$mu_Price_of_Bin)
    df_plot$lV <- log(df_plot$Vol_in_Bin)
    is.na(df_plot) <- sapply(df_plot, is.infinite)
    df_plot <- df_plot[-1, ]
    df_fit <- df_plot[!(is.infinite(df_plot$lV) | is.na(df_plot$lV)), ]
    pfit <- polyfit(df_fit$lP, df_fit$lV)
    pfit
    gg <- ggplot(df_plot, aes(x = lP, y = lV))
    gg <- gg + geom_point()
    gg <- gg + geom_abline(slope = pfit[1], intercept = pfit[2])
    gg
    
  }
  return(df_VPOC)
}
#===========================

fromdate<-"2018-01-01"; todate <- "2019-01-01"

# "AUDUSD=x", "GBPUSD=x", "USDJPY=x",
# "EURJPY=x", "USDCAD=x",
this_guy <- "NIB"
tbl_ohlcv <- tq_get(this_guy, get = "stock.prices", from = fromdate)
df_ohlcv <- as.data.frame(tbl_ohlcv)
df_ohlcv$p <- rowSums(df_ohlcv[, c(3:5)]) / 3
#--
df_p <- df_ohlcv[, c("date", "p")]
#--
min_price <- min(df_p$p)
max_price <- max(df_p$p)
bins <- seq(min_price, max_price, l = 144)
n_bins <- length(bins)
df_VPOC <- getVolBins(bins, ts_price = df_p$p, ts_volume = df_ohlcv$volume, graph_on = T)
df_VPOCrect <- data.frame(ymin = bins[-n_bins], ymax = bins[-1])
df_VPOCrect$Vol_in_bin <- df_VPOC$Vol_in_Bin[-1]
df_plot <- df_p
#df_plot$date <- as.integer(df_plot$date)
volume_thresh <- as.numeric(quantile(df_ohlcv$volume, probs = 0.9999999))
#--
gg <- ggplot()
gg <- gg + geom_rect(data = df_VPOCrect, aes(xmin = -Inf, xmax = Inf,
                                             ymin = ymin, ymax = ymax, fill = Vol_in_bin), alpha = 0.8)
gg <- gg + scale_fill_gradient2(low = "cyan", mid = "khaki2", high = "magenta", midpoint = volume_thresh)
gg <- gg + geom_line(data = df_plot, aes(x = date, y = p))
gg <- gg + theme_bw()
gg
gg1 <- gg
#-------------------------------------
